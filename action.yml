name: Install GCC
description: Install GCC

inputs:
  platform:
    description: Target platform
    required: false
    default: x64
  cygwin:
    description: Install inside Cygwin
    required: false
    default: 0

runs:
  using: composite
  steps:
    - run: |
        New-Variable os -Value '${{ runner.os }}' -Option Constant

        New-Variable linux_host -Value ($os -eq 'Linux') -Option Constant
        New-Variable cygwin_host -Value ('${{ inputs.cygwin }}' -eq '1') -Option Constant
        New-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin) -Option Constant

        New-Variable x64 -Value ('${{ inputs.platform }}' -eq 'x64') -Option Constant

        function Locate-Choco {
            $path = Get-Command 'choco' -ErrorAction SilentlyContinue
            if ($path) {
                $path.Path
            } else {
                Join-Path ${env:ProgramData} 'chocolatey' 'bin' 'choco'
            }
        }

        function Install-Package {
            param(
                [Parameter(Mandatory=$true, ValueFromRemainingArguments=$true)]
                [string[]] $Packages
            )

            if ($script:linux_host) {
                sudo apt-get update -yq
                sudo apt-get install -yq --no-install-recommends $Packages
            } elseif ($script:cygwin_host) {
                $choco = Locate-Choco
                & $choco install -y --no-progress --source=cygwin $Packages
            } elseif ($script:windows_host) {
                $choco = Locate-Choco
                & $choco install -y --no-progress $Packages
            } else {
                throw "Sorry, installing packages is unsupported on $script:os"
            }
        }

        function Make-Link {
            param(
                [Parameter(Mandatory=$true)]
                [string] $ExeName,
                [Parameter(Mandatory=$true)]
                [string] $LinkName
            )

            $exe_path = (Get-Command $ExeName).Path
            $exe_dir = Split-Path $exe_path
            $exe_name = Split-Path $exe_path -Leaf
            if (!$exe_name.StartsWith($ExeName)) {
                throw "'$exe_name' must start with '$ExeName'"
            }
            $ext = $exe_name.Substring($ExeName.Length)

            $link_dir = if ($script:linux_host) { '/usr/local/bin' } else { $exe_dir }
            $link_name = $LinkName + $ext
            $link_path = Join-Path $link_dir $link_name

            echo "Creating link '$link_path', pointing to '$exe_path'"
            if ($script:linux_host) {
                sudo rm -f -- $link_path
                sudo ln -s -- $exe_path $link_path
            } else {
                if (Test-Path $link_path) {
                    Remove-Item $link_path -Force
                }
                New-Item -ItemType HardLink -Path $link_path -Value $exe_path | Out-Null
            }
        }

        if ($linux_host) {
            $pkg = if ($x64) { 'g++' } else { 'g++-multilib' }
            Install-Package $pkg
            Make-Link -Exe gcc -LinkName cc
            Make-Link -Exe g++ -LinkName c++
        } elseif ($cygwin_host) {
            if (!$x64) {
                echo @'
        ::warning ::
        32-bit-targeting GCC is unstable and/or unmaintained on 64-bit Cygwin.
        Please use 32-bit Cygwin instead.
        If you _are_ using 32-bit Cygwin, you can ignore this message.
        '@
            }
            Install-Package gcc-g++
            Make-Link -Exe gcc -LinkName cc
            Make-Link -Exe g++ -LinkName c++
        } elseif ($windows_host) {
            # TODO: use setup-mingw when calling composite actions within
            # composite actions is implemented.
            echo @'
        ::error ::
        Please use the egor-tensin/setup-mingw action to install GCC on Windows.
        '@
            exit 1
        } else {
            throw "Sorry, installing GCC is unsupported on $os"
        }
      shell: pwsh

branding:
  icon: star
  color: green
