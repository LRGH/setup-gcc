name: Test

on:
  push:
  pull_request:

jobs:
  versions:
    strategy:
      fail-fast: false
      matrix:
        platform: [x86, x64]
        os: [ubuntu-20.04, ubuntu-22.04]
        version: [4.4, 4.6, 4.8, 5, 6, 7, 8, 9, 10, 11, 12, 13, latest]
        exclude:
          - {os: ubuntu-18.04, version: 12}
          - {os: ubuntu-18.04, version: 13}
          - {os: ubuntu-20.04, version: 12}
          - {os: ubuntu-20.04, version: 13}
          - {os: ubuntu-22.04, version: 8}
          - {os: ubuntu-22.04, version: 4.4}
          - {os: ubuntu-22.04, version: 4.6}
          - {platform: x86, version: 4.8}
          - {platform: x86, version: 5}
          - {platform: x86, version: 6}
          - {platform: x86, version: 7}
          - {platform: x86, version: 8}
          - {platform: x86, version: 9}
          - {platform: x86, version: 10}
          - {platform: x86, version: 11}
          - {platform: x86, version: 12}
          - {platform: x86, version: 13}
          # there is a difference to investigate between "latest" and the actual gcc version corresponding to latest: 32-bit compilation does not work!
    runs-on: '${{ matrix.os }}'
    name: '${{ matrix.os }} / gcc ${{ matrix.version }} ${{ matrix.platform }}'
    env:
      PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up GCC
        uses: ./
        with:
          version: '${{ matrix.version }}'
          platform: '${{ matrix.platform }}'
      - name: Build and run minimal C program
        run: |
          gcc --version
          echo 'int main() { return 0; }' > a.c
          if test 'x86' = $PLATFORM; then flags=-m32; else flags=; fi
          gcc $flags -o a.out a.c
          file a.out
          ./a.out
      - name: Build and run minimal C++ program
        if: ${{ matrix.platform != 'x86' }}
        run: |
          gcc --version
          echo 'int main() { return 0; }' > a.c
          if test 'x86' = $PLATFORM; then flags=-m32; else flags=; fi
          g++ $flags -o a.out a.c
          file a.out
          ./a.out
      - name: Build and test zlib 1.2.8
        run: |
          curl -O https://zlib.net/fossils/zlib-1.2.8.tar.gz
          tar xzf zlib-1.2.8.tar.gz
          cd zlib-1.2.8
          ./configure
          flags="-O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN"
          if test 'x86' = $PLATFORM; then flags="-m32 $flags"; fi
          make clean; make test CFLAGS="$flags" SFLAGS="-fPIC $flags"

  ubuntu:
    strategy:
      matrix:
        platform: [x86, x64]
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: '${{ matrix.os }}'
    name: 'Test: ${{ matrix.os }} / ${{ matrix.platform }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up GCC
        uses: ./
        with:
          platform: '${{ matrix.platform }}'
          cc: 1
      - name: Build foo.exe
        uses: ./.github/actions/build-foo
      - name: Run foo.exe
        uses: ./.github/actions/run-foo
      - name: Check symlinks
        uses: ./.github/actions/check-cc

  cygwin:
    strategy:
      matrix:
        hardlinks: [0, 1]
    runs-on: windows-latest
    name: 'Cygwin: hardlinks${{ matrix.hardlinks }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Clean up PATH
        uses: egor-tensin/cleanup-path@v3
      - name: Install Cygwin
        uses: egor-tensin/setup-cygwin@v4
      - name: Set up GCC
        uses: ./
        with:
          cygwin: 1
          cc: 1
          hardlinks: '${{ matrix.hardlinks }}'
      - name: Build foo.exe
        uses: ./.github/actions/build-foo
        if: matrix.hardlinks
      - name: Build foo.exe
        uses: ./.github/actions/build-foo-cygwin
        if: '!matrix.hardlinks'
      - name: Run foo.exe
        uses: ./.github/actions/run-foo
      - name: Check symlinks
        uses: ./.github/actions/check-cc
        if: matrix.hardlinks
      - name: Check symlinks
        uses: ./.github/actions/check-cc-cygwin
        if: '!matrix.hardlinks'
